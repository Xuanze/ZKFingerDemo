package com.zhongruan.android.zkfingerdemo.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhongruan.android.zkfingerdemo.db.entity.Ks_kc;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ks_kc".
*/
public class Ks_kcDao extends AbstractDao<Ks_kc, Long> {

    public static final String TABLENAME = "ks_kc";

    /**
     * Properties of entity Ks_kc.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Kcid = new Property(0, Long.class, "kcid", true, "kcid");
        public final static Property Kc_no = new Property(1, String.class, "kc_no", false, "kc_no");
        public final static Property Kc_name = new Property(2, String.class, "kc_name", false, "kc_name");
        public final static Property Kc_extract = new Property(3, String.class, "kc_extract", false, "kc_extract");
    }


    public Ks_kcDao(DaoConfig config) {
        super(config);
    }
    
    public Ks_kcDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ks_kc\" (" + //
                "\"kcid\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: kcid
                "\"kc_no\" TEXT," + // 1: kc_no
                "\"kc_name\" TEXT," + // 2: kc_name
                "\"kc_extract\" TEXT);"); // 3: kc_extract
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ks_kc\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Ks_kc entity) {
        stmt.clearBindings();
 
        Long kcid = entity.getKcid();
        if (kcid != null) {
            stmt.bindLong(1, kcid);
        }
 
        String kc_no = entity.getKc_no();
        if (kc_no != null) {
            stmt.bindString(2, kc_no);
        }
 
        String kc_name = entity.getKc_name();
        if (kc_name != null) {
            stmt.bindString(3, kc_name);
        }
 
        String kc_extract = entity.getKc_extract();
        if (kc_extract != null) {
            stmt.bindString(4, kc_extract);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Ks_kc entity) {
        stmt.clearBindings();
 
        Long kcid = entity.getKcid();
        if (kcid != null) {
            stmt.bindLong(1, kcid);
        }
 
        String kc_no = entity.getKc_no();
        if (kc_no != null) {
            stmt.bindString(2, kc_no);
        }
 
        String kc_name = entity.getKc_name();
        if (kc_name != null) {
            stmt.bindString(3, kc_name);
        }
 
        String kc_extract = entity.getKc_extract();
        if (kc_extract != null) {
            stmt.bindString(4, kc_extract);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Ks_kc readEntity(Cursor cursor, int offset) {
        Ks_kc entity = new Ks_kc( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // kcid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // kc_no
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // kc_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // kc_extract
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Ks_kc entity, int offset) {
        entity.setKcid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKc_no(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setKc_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setKc_extract(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Ks_kc entity, long rowId) {
        entity.setKcid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Ks_kc entity) {
        if(entity != null) {
            return entity.getKcid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Ks_kc entity) {
        return entity.getKcid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
