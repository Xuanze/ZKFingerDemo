package com.zhongruan.android.zkfingerdemo.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhongruan.android.zkfingerdemo.db.entity.Bk_ks_temp;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "bk_ks_temp".
*/
public class Bk_ks_tempDao extends AbstractDao<Bk_ks_temp, Void> {

    public static final String TABLENAME = "bk_ks_temp";

    /**
     * Properties of entity Bk_ks_temp.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Ksno = new Property(0, String.class, "ksno", false, "ksno");
        public final static Property Xm = new Property(1, String.class, "xm", false, "xm");
        public final static Property Bmxh = new Property(2, String.class, "bmxh", false, "bmxh");
        public final static Property Zkzh = new Property(3, String.class, "zkzh", false, "zkzh");
        public final static Property Zjno = new Property(4, String.class, "zjno", false, "zjno");
        public final static Property Xb = new Property(5, String.class, "xb", false, "xb");
        public final static Property Lxdh = new Property(6, String.class, "lxdh", false, "lxdh");
        public final static Property Xjh = new Property(7, String.class, "xjh", false, "xjh");
        public final static Property Sfks = new Property(8, String.class, "sfks", false, "sfks");
        public final static Property Zw = new Property(9, String.class, "zw", false, "zw");
        public final static Property Kmno = new Property(10, String.class, "kmno", false, "kmno");
        public final static Property Kmmc = new Property(11, String.class, "kmmc", false, "kmmc");
        public final static Property Ccno = new Property(12, String.class, "ccno", false, "ccno");
        public final static Property Ccmc = new Property(13, String.class, "ccmc", false, "ccmc");
        public final static Property Kssj = new Property(14, String.class, "kssj", false, "kssj");
        public final static Property Jssj = new Property(15, String.class, "jssj", false, "jssj");
        public final static Property Kcno = new Property(16, String.class, "kcno", false, "kcno");
        public final static Property Kcmc = new Property(17, String.class, "kcmc", false, "kcmc");
        public final static Property Kcsx = new Property(18, String.class, "kcsx", false, "kcsx");
        public final static Property Kdno = new Property(19, String.class, "kdno", false, "kdno");
        public final static Property Kdmc = new Property(20, String.class, "kdmc", false, "kdmc");
        public final static Property Bmd = new Property(21, String.class, "bmd", false, "bmd");
        public final static Property Bmdmc = new Property(22, String.class, "bmdmc", false, "bmdmc");
        public final static Property Cjbj = new Property(23, String.class, "cjbj", false, "cjbj");
    }


    public Bk_ks_tempDao(DaoConfig config) {
        super(config);
    }
    
    public Bk_ks_tempDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"bk_ks_temp\" (" + //
                "\"ksno\" TEXT," + // 0: ksno
                "\"xm\" TEXT," + // 1: xm
                "\"bmxh\" TEXT," + // 2: bmxh
                "\"zkzh\" TEXT," + // 3: zkzh
                "\"zjno\" TEXT," + // 4: zjno
                "\"xb\" TEXT," + // 5: xb
                "\"lxdh\" TEXT," + // 6: lxdh
                "\"xjh\" TEXT," + // 7: xjh
                "\"sfks\" TEXT," + // 8: sfks
                "\"zw\" TEXT," + // 9: zw
                "\"kmno\" TEXT," + // 10: kmno
                "\"kmmc\" TEXT," + // 11: kmmc
                "\"ccno\" TEXT," + // 12: ccno
                "\"ccmc\" TEXT," + // 13: ccmc
                "\"kssj\" TEXT," + // 14: kssj
                "\"jssj\" TEXT," + // 15: jssj
                "\"kcno\" TEXT," + // 16: kcno
                "\"kcmc\" TEXT," + // 17: kcmc
                "\"kcsx\" TEXT," + // 18: kcsx
                "\"kdno\" TEXT," + // 19: kdno
                "\"kdmc\" TEXT," + // 20: kdmc
                "\"bmd\" TEXT," + // 21: bmd
                "\"bmdmc\" TEXT," + // 22: bmdmc
                "\"cjbj\" TEXT);"); // 23: cjbj
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"bk_ks_temp\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Bk_ks_temp entity) {
        stmt.clearBindings();
 
        String ksno = entity.getKsno();
        if (ksno != null) {
            stmt.bindString(1, ksno);
        }
 
        String xm = entity.getXm();
        if (xm != null) {
            stmt.bindString(2, xm);
        }
 
        String bmxh = entity.getBmxh();
        if (bmxh != null) {
            stmt.bindString(3, bmxh);
        }
 
        String zkzh = entity.getZkzh();
        if (zkzh != null) {
            stmt.bindString(4, zkzh);
        }
 
        String zjno = entity.getZjno();
        if (zjno != null) {
            stmt.bindString(5, zjno);
        }
 
        String xb = entity.getXb();
        if (xb != null) {
            stmt.bindString(6, xb);
        }
 
        String lxdh = entity.getLxdh();
        if (lxdh != null) {
            stmt.bindString(7, lxdh);
        }
 
        String xjh = entity.getXjh();
        if (xjh != null) {
            stmt.bindString(8, xjh);
        }
 
        String sfks = entity.getSfks();
        if (sfks != null) {
            stmt.bindString(9, sfks);
        }
 
        String zw = entity.getZw();
        if (zw != null) {
            stmt.bindString(10, zw);
        }
 
        String kmno = entity.getKmno();
        if (kmno != null) {
            stmt.bindString(11, kmno);
        }
 
        String kmmc = entity.getKmmc();
        if (kmmc != null) {
            stmt.bindString(12, kmmc);
        }
 
        String ccno = entity.getCcno();
        if (ccno != null) {
            stmt.bindString(13, ccno);
        }
 
        String ccmc = entity.getCcmc();
        if (ccmc != null) {
            stmt.bindString(14, ccmc);
        }
 
        String kssj = entity.getKssj();
        if (kssj != null) {
            stmt.bindString(15, kssj);
        }
 
        String jssj = entity.getJssj();
        if (jssj != null) {
            stmt.bindString(16, jssj);
        }
 
        String kcno = entity.getKcno();
        if (kcno != null) {
            stmt.bindString(17, kcno);
        }
 
        String kcmc = entity.getKcmc();
        if (kcmc != null) {
            stmt.bindString(18, kcmc);
        }
 
        String kcsx = entity.getKcsx();
        if (kcsx != null) {
            stmt.bindString(19, kcsx);
        }
 
        String kdno = entity.getKdno();
        if (kdno != null) {
            stmt.bindString(20, kdno);
        }
 
        String kdmc = entity.getKdmc();
        if (kdmc != null) {
            stmt.bindString(21, kdmc);
        }
 
        String bmd = entity.getBmd();
        if (bmd != null) {
            stmt.bindString(22, bmd);
        }
 
        String bmdmc = entity.getBmdmc();
        if (bmdmc != null) {
            stmt.bindString(23, bmdmc);
        }
 
        String cjbj = entity.getCjbj();
        if (cjbj != null) {
            stmt.bindString(24, cjbj);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Bk_ks_temp entity) {
        stmt.clearBindings();
 
        String ksno = entity.getKsno();
        if (ksno != null) {
            stmt.bindString(1, ksno);
        }
 
        String xm = entity.getXm();
        if (xm != null) {
            stmt.bindString(2, xm);
        }
 
        String bmxh = entity.getBmxh();
        if (bmxh != null) {
            stmt.bindString(3, bmxh);
        }
 
        String zkzh = entity.getZkzh();
        if (zkzh != null) {
            stmt.bindString(4, zkzh);
        }
 
        String zjno = entity.getZjno();
        if (zjno != null) {
            stmt.bindString(5, zjno);
        }
 
        String xb = entity.getXb();
        if (xb != null) {
            stmt.bindString(6, xb);
        }
 
        String lxdh = entity.getLxdh();
        if (lxdh != null) {
            stmt.bindString(7, lxdh);
        }
 
        String xjh = entity.getXjh();
        if (xjh != null) {
            stmt.bindString(8, xjh);
        }
 
        String sfks = entity.getSfks();
        if (sfks != null) {
            stmt.bindString(9, sfks);
        }
 
        String zw = entity.getZw();
        if (zw != null) {
            stmt.bindString(10, zw);
        }
 
        String kmno = entity.getKmno();
        if (kmno != null) {
            stmt.bindString(11, kmno);
        }
 
        String kmmc = entity.getKmmc();
        if (kmmc != null) {
            stmt.bindString(12, kmmc);
        }
 
        String ccno = entity.getCcno();
        if (ccno != null) {
            stmt.bindString(13, ccno);
        }
 
        String ccmc = entity.getCcmc();
        if (ccmc != null) {
            stmt.bindString(14, ccmc);
        }
 
        String kssj = entity.getKssj();
        if (kssj != null) {
            stmt.bindString(15, kssj);
        }
 
        String jssj = entity.getJssj();
        if (jssj != null) {
            stmt.bindString(16, jssj);
        }
 
        String kcno = entity.getKcno();
        if (kcno != null) {
            stmt.bindString(17, kcno);
        }
 
        String kcmc = entity.getKcmc();
        if (kcmc != null) {
            stmt.bindString(18, kcmc);
        }
 
        String kcsx = entity.getKcsx();
        if (kcsx != null) {
            stmt.bindString(19, kcsx);
        }
 
        String kdno = entity.getKdno();
        if (kdno != null) {
            stmt.bindString(20, kdno);
        }
 
        String kdmc = entity.getKdmc();
        if (kdmc != null) {
            stmt.bindString(21, kdmc);
        }
 
        String bmd = entity.getBmd();
        if (bmd != null) {
            stmt.bindString(22, bmd);
        }
 
        String bmdmc = entity.getBmdmc();
        if (bmdmc != null) {
            stmt.bindString(23, bmdmc);
        }
 
        String cjbj = entity.getCjbj();
        if (cjbj != null) {
            stmt.bindString(24, cjbj);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Bk_ks_temp readEntity(Cursor cursor, int offset) {
        Bk_ks_temp entity = new Bk_ks_temp( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ksno
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // xm
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bmxh
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // zkzh
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // zjno
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // xb
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lxdh
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // xjh
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sfks
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // zw
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // kmno
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // kmmc
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // ccno
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // ccmc
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // kssj
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // jssj
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // kcno
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // kcmc
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // kcsx
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // kdno
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // kdmc
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // bmd
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // bmdmc
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23) // cjbj
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Bk_ks_temp entity, int offset) {
        entity.setKsno(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setXm(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBmxh(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setZkzh(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setZjno(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setXb(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLxdh(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setXjh(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSfks(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setZw(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setKmno(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setKmmc(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCcno(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCcmc(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setKssj(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setJssj(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setKcno(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setKcmc(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setKcsx(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setKdno(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setKdmc(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setBmd(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setBmdmc(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setCjbj(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Bk_ks_temp entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Bk_ks_temp entity) {
        return null;
    }

    @Override
    public boolean hasKey(Bk_ks_temp entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
