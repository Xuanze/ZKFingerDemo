package com.zhongruan.android.zkfingerdemo.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhongruan.android.zkfingerdemo.db.entity.Sb_setting;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "sb_setting".
*/
public class Sb_settingDao extends AbstractDao<Sb_setting, Long> {

    public static final String TABLENAME = "sb_setting";

    /**
     * Properties of entity Sb_setting.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Settingid = new Property(0, Long.class, "settingid", true, "settingid");
        public final static Property Sb_ip = new Property(1, String.class, "sb_ip", false, "sb_ip");
        public final static Property Sb_sn = new Property(2, String.class, "sb_sn", false, "sb_sn");
        public final static Property Sb_ms = new Property(3, String.class, "sb_ms", false, "sb_ms");
        public final static Property Sb_hyfs = new Property(4, String.class, "sb_hyfs", false, "sb_hyfs");
        public final static Property Sb_finger_fz = new Property(5, String.class, "sb_finger_fz", false, "sb_finger_fz");
        public final static Property Sb_finger_cfcs = new Property(6, String.class, "sb_finger_cfcs", false, "sb_finger_cfcs");
        public final static Property Sb_face_xsd = new Property(7, String.class, "sb_face_xsd", false, "sb_face_xsd");
        public final static Property Sb_face_cfcs = new Property(8, String.class, "sb_face_cfcs", false, "sb_face_cfcs");
    }


    public Sb_settingDao(DaoConfig config) {
        super(config);
    }
    
    public Sb_settingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"sb_setting\" (" + //
                "\"settingid\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: settingid
                "\"sb_ip\" TEXT," + // 1: sb_ip
                "\"sb_sn\" TEXT," + // 2: sb_sn
                "\"sb_ms\" TEXT," + // 3: sb_ms
                "\"sb_hyfs\" TEXT," + // 4: sb_hyfs
                "\"sb_finger_fz\" TEXT," + // 5: sb_finger_fz
                "\"sb_finger_cfcs\" TEXT," + // 6: sb_finger_cfcs
                "\"sb_face_xsd\" TEXT," + // 7: sb_face_xsd
                "\"sb_face_cfcs\" TEXT);"); // 8: sb_face_cfcs
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"sb_setting\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Sb_setting entity) {
        stmt.clearBindings();
 
        Long settingid = entity.getSettingid();
        if (settingid != null) {
            stmt.bindLong(1, settingid);
        }
 
        String sb_ip = entity.getSb_ip();
        if (sb_ip != null) {
            stmt.bindString(2, sb_ip);
        }
 
        String sb_sn = entity.getSb_sn();
        if (sb_sn != null) {
            stmt.bindString(3, sb_sn);
        }
 
        String sb_ms = entity.getSb_ms();
        if (sb_ms != null) {
            stmt.bindString(4, sb_ms);
        }
 
        String sb_hyfs = entity.getSb_hyfs();
        if (sb_hyfs != null) {
            stmt.bindString(5, sb_hyfs);
        }
 
        String sb_finger_fz = entity.getSb_finger_fz();
        if (sb_finger_fz != null) {
            stmt.bindString(6, sb_finger_fz);
        }
 
        String sb_finger_cfcs = entity.getSb_finger_cfcs();
        if (sb_finger_cfcs != null) {
            stmt.bindString(7, sb_finger_cfcs);
        }
 
        String sb_face_xsd = entity.getSb_face_xsd();
        if (sb_face_xsd != null) {
            stmt.bindString(8, sb_face_xsd);
        }
 
        String sb_face_cfcs = entity.getSb_face_cfcs();
        if (sb_face_cfcs != null) {
            stmt.bindString(9, sb_face_cfcs);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Sb_setting entity) {
        stmt.clearBindings();
 
        Long settingid = entity.getSettingid();
        if (settingid != null) {
            stmt.bindLong(1, settingid);
        }
 
        String sb_ip = entity.getSb_ip();
        if (sb_ip != null) {
            stmt.bindString(2, sb_ip);
        }
 
        String sb_sn = entity.getSb_sn();
        if (sb_sn != null) {
            stmt.bindString(3, sb_sn);
        }
 
        String sb_ms = entity.getSb_ms();
        if (sb_ms != null) {
            stmt.bindString(4, sb_ms);
        }
 
        String sb_hyfs = entity.getSb_hyfs();
        if (sb_hyfs != null) {
            stmt.bindString(5, sb_hyfs);
        }
 
        String sb_finger_fz = entity.getSb_finger_fz();
        if (sb_finger_fz != null) {
            stmt.bindString(6, sb_finger_fz);
        }
 
        String sb_finger_cfcs = entity.getSb_finger_cfcs();
        if (sb_finger_cfcs != null) {
            stmt.bindString(7, sb_finger_cfcs);
        }
 
        String sb_face_xsd = entity.getSb_face_xsd();
        if (sb_face_xsd != null) {
            stmt.bindString(8, sb_face_xsd);
        }
 
        String sb_face_cfcs = entity.getSb_face_cfcs();
        if (sb_face_cfcs != null) {
            stmt.bindString(9, sb_face_cfcs);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Sb_setting readEntity(Cursor cursor, int offset) {
        Sb_setting entity = new Sb_setting( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // settingid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sb_ip
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sb_sn
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sb_ms
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sb_hyfs
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sb_finger_fz
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sb_finger_cfcs
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sb_face_xsd
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // sb_face_cfcs
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Sb_setting entity, int offset) {
        entity.setSettingid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSb_ip(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSb_sn(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSb_ms(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSb_hyfs(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSb_finger_fz(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSb_finger_cfcs(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSb_face_xsd(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSb_face_cfcs(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Sb_setting entity, long rowId) {
        entity.setSettingid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Sb_setting entity) {
        if(entity != null) {
            return entity.getSettingid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Sb_setting entity) {
        return entity.getSettingid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
