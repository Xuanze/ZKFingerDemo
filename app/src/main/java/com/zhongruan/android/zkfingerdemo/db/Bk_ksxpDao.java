package com.zhongruan.android.zkfingerdemo.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhongruan.android.zkfingerdemo.db.entity.Bk_ksxp;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "bk_ksxp".
*/
public class Bk_ksxpDao extends AbstractDao<Bk_ksxp, Void> {

    public static final String TABLENAME = "bk_ksxp";

    /**
     * Properties of entity Bk_ksxp.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Ksno = new Property(0, String.class, "ksno", false, "ksno");
        public final static Property Xm = new Property(1, String.class, "xm", false, "xm");
        public final static Property Zjno = new Property(2, String.class, "zjno", false, "zjno");
        public final static Property Xp_jym = new Property(3, String.class, "xp_jym", false, "xp_jym");
        public final static Property Xp_pic = new Property(4, String.class, "xp_pic", false, "xp_pic");
    }


    public Bk_ksxpDao(DaoConfig config) {
        super(config);
    }
    
    public Bk_ksxpDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"bk_ksxp\" (" + //
                "\"ksno\" TEXT," + // 0: ksno
                "\"xm\" TEXT," + // 1: xm
                "\"zjno\" TEXT," + // 2: zjno
                "\"xp_jym\" TEXT," + // 3: xp_jym
                "\"xp_pic\" TEXT);"); // 4: xp_pic
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"bk_ksxp\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Bk_ksxp entity) {
        stmt.clearBindings();
 
        String ksno = entity.getKsno();
        if (ksno != null) {
            stmt.bindString(1, ksno);
        }
 
        String xm = entity.getXm();
        if (xm != null) {
            stmt.bindString(2, xm);
        }
 
        String zjno = entity.getZjno();
        if (zjno != null) {
            stmt.bindString(3, zjno);
        }
 
        String xp_jym = entity.getXp_jym();
        if (xp_jym != null) {
            stmt.bindString(4, xp_jym);
        }
 
        String xp_pic = entity.getXp_pic();
        if (xp_pic != null) {
            stmt.bindString(5, xp_pic);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Bk_ksxp entity) {
        stmt.clearBindings();
 
        String ksno = entity.getKsno();
        if (ksno != null) {
            stmt.bindString(1, ksno);
        }
 
        String xm = entity.getXm();
        if (xm != null) {
            stmt.bindString(2, xm);
        }
 
        String zjno = entity.getZjno();
        if (zjno != null) {
            stmt.bindString(3, zjno);
        }
 
        String xp_jym = entity.getXp_jym();
        if (xp_jym != null) {
            stmt.bindString(4, xp_jym);
        }
 
        String xp_pic = entity.getXp_pic();
        if (xp_pic != null) {
            stmt.bindString(5, xp_pic);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Bk_ksxp readEntity(Cursor cursor, int offset) {
        Bk_ksxp entity = new Bk_ksxp( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ksno
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // xm
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // zjno
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // xp_jym
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // xp_pic
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Bk_ksxp entity, int offset) {
        entity.setKsno(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setXm(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setZjno(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setXp_jym(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setXp_pic(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Bk_ksxp entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Bk_ksxp entity) {
        return null;
    }

    @Override
    public boolean hasKey(Bk_ksxp entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
