package com.zhongruan.android.zkfingerdemo.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhongruan.android.zkfingerdemo.db.entity.Sfrz_rzfs;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "sfrz_rzfs".
*/
public class Sfrz_rzfsDao extends AbstractDao<Sfrz_rzfs, Long> {

    public static final String TABLENAME = "sfrz_rzfs";

    /**
     * Properties of entity Sfrz_rzfs.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Rzfsid = new Property(0, Long.class, "rzfsid", true, "rzfsid");
        public final static Property Rzfs_no = new Property(1, String.class, "rzfs_no", false, "rzfs_no");
        public final static Property Rzfs_name = new Property(2, String.class, "rzfs_name", false, "rzfs_name");
    }


    public Sfrz_rzfsDao(DaoConfig config) {
        super(config);
    }
    
    public Sfrz_rzfsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"sfrz_rzfs\" (" + //
                "\"rzfsid\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: rzfsid
                "\"rzfs_no\" TEXT," + // 1: rzfs_no
                "\"rzfs_name\" TEXT);"); // 2: rzfs_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"sfrz_rzfs\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Sfrz_rzfs entity) {
        stmt.clearBindings();
 
        Long rzfsid = entity.getRzfsid();
        if (rzfsid != null) {
            stmt.bindLong(1, rzfsid);
        }
 
        String rzfs_no = entity.getRzfs_no();
        if (rzfs_no != null) {
            stmt.bindString(2, rzfs_no);
        }
 
        String rzfs_name = entity.getRzfs_name();
        if (rzfs_name != null) {
            stmt.bindString(3, rzfs_name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Sfrz_rzfs entity) {
        stmt.clearBindings();
 
        Long rzfsid = entity.getRzfsid();
        if (rzfsid != null) {
            stmt.bindLong(1, rzfsid);
        }
 
        String rzfs_no = entity.getRzfs_no();
        if (rzfs_no != null) {
            stmt.bindString(2, rzfs_no);
        }
 
        String rzfs_name = entity.getRzfs_name();
        if (rzfs_name != null) {
            stmt.bindString(3, rzfs_name);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Sfrz_rzfs readEntity(Cursor cursor, int offset) {
        Sfrz_rzfs entity = new Sfrz_rzfs( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // rzfsid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // rzfs_no
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // rzfs_name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Sfrz_rzfs entity, int offset) {
        entity.setRzfsid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRzfs_no(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRzfs_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Sfrz_rzfs entity, long rowId) {
        entity.setRzfsid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Sfrz_rzfs entity) {
        if(entity != null) {
            return entity.getRzfsid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Sfrz_rzfs entity) {
        return entity.getRzfsid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
