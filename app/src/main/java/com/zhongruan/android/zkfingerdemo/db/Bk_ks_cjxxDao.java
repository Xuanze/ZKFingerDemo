package com.zhongruan.android.zkfingerdemo.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhongruan.android.zkfingerdemo.db.entity.Bk_ks_cjxx;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "bk_ks_cjxx".
*/
public class Bk_ks_cjxxDao extends AbstractDao<Bk_ks_cjxx, Long> {

    public static final String TABLENAME = "bk_ks_cjxx";

    /**
     * Properties of entity Bk_ks_cjxx.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property Sfz_cardNo = new Property(1, String.class, "sfz_cardNo", false, "sfz_cardNo");
        public final static Property Sfz_xm = new Property(2, String.class, "sfz_xm", false, "sfz_xm");
        public final static Property Sfz_xb = new Property(3, String.class, "sfz_xb", false, "sfz_xb");
        public final static Property Sfz_mz = new Property(4, String.class, "sfz_mz", false, "sfz_mz");
        public final static Property Sfz_birth = new Property(5, String.class, "sfz_birth", false, "sfz_birth");
        public final static Property Sfz_address = new Property(6, String.class, "sfz_address", false, "sfz_address");
        public final static Property Sfz_sfzh = new Property(7, String.class, "sfz_sfzh", false, "sfz_sfzh");
        public final static Property Sfz_picpath = new Property(8, String.class, "sfz_picpath", false, "sfz_picpath");
        public final static Property Sfz_qfjg = new Property(9, String.class, "sfz_qfjg", false, "sfz_qfjg");
        public final static Property Sfz_yxjsrq = new Property(10, String.class, "sfz_yxjsrq", false, "sfz_yxjsrq");
        public final static Property Sfz_yxksrq = new Property(11, String.class, "sfz_yxksrq", false, "sfz_yxksrq");
        public final static Property Zw_picpath = new Property(12, String.class, "zw_picpath", false, "zw_picpath");
        public final static Property Zw_features = new Property(13, String.class, "zw_features", false, "zw_features");
        public final static Property Zw_quality = new Property(14, int.class, "zw_quality", false, "zw_quality");
        public final static Property Rl_picpath = new Property(15, String.class, "rl_picpath", false, "rl_picpath");
        public final static Property CjTime = new Property(16, String.class, "cjTime", false, "cjTime");
        public final static Property IsSbzt = new Property(17, int.class, "isSbzt", false, "isSbzt");
    }


    public Bk_ks_cjxxDao(DaoConfig config) {
        super(config);
    }
    
    public Bk_ks_cjxxDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"bk_ks_cjxx\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"sfz_cardNo\" TEXT," + // 1: sfz_cardNo
                "\"sfz_xm\" TEXT," + // 2: sfz_xm
                "\"sfz_xb\" TEXT," + // 3: sfz_xb
                "\"sfz_mz\" TEXT," + // 4: sfz_mz
                "\"sfz_birth\" TEXT," + // 5: sfz_birth
                "\"sfz_address\" TEXT," + // 6: sfz_address
                "\"sfz_sfzh\" TEXT," + // 7: sfz_sfzh
                "\"sfz_picpath\" TEXT," + // 8: sfz_picpath
                "\"sfz_qfjg\" TEXT," + // 9: sfz_qfjg
                "\"sfz_yxjsrq\" TEXT," + // 10: sfz_yxjsrq
                "\"sfz_yxksrq\" TEXT," + // 11: sfz_yxksrq
                "\"zw_picpath\" TEXT," + // 12: zw_picpath
                "\"zw_features\" TEXT," + // 13: zw_features
                "\"zw_quality\" INTEGER NOT NULL ," + // 14: zw_quality
                "\"rl_picpath\" TEXT," + // 15: rl_picpath
                "\"cjTime\" TEXT," + // 16: cjTime
                "\"isSbzt\" INTEGER NOT NULL );"); // 17: isSbzt
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"bk_ks_cjxx\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Bk_ks_cjxx entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sfz_cardNo = entity.getSfz_cardNo();
        if (sfz_cardNo != null) {
            stmt.bindString(2, sfz_cardNo);
        }
 
        String sfz_xm = entity.getSfz_xm();
        if (sfz_xm != null) {
            stmt.bindString(3, sfz_xm);
        }
 
        String sfz_xb = entity.getSfz_xb();
        if (sfz_xb != null) {
            stmt.bindString(4, sfz_xb);
        }
 
        String sfz_mz = entity.getSfz_mz();
        if (sfz_mz != null) {
            stmt.bindString(5, sfz_mz);
        }
 
        String sfz_birth = entity.getSfz_birth();
        if (sfz_birth != null) {
            stmt.bindString(6, sfz_birth);
        }
 
        String sfz_address = entity.getSfz_address();
        if (sfz_address != null) {
            stmt.bindString(7, sfz_address);
        }
 
        String sfz_sfzh = entity.getSfz_sfzh();
        if (sfz_sfzh != null) {
            stmt.bindString(8, sfz_sfzh);
        }
 
        String sfz_picpath = entity.getSfz_picpath();
        if (sfz_picpath != null) {
            stmt.bindString(9, sfz_picpath);
        }
 
        String sfz_qfjg = entity.getSfz_qfjg();
        if (sfz_qfjg != null) {
            stmt.bindString(10, sfz_qfjg);
        }
 
        String sfz_yxjsrq = entity.getSfz_yxjsrq();
        if (sfz_yxjsrq != null) {
            stmt.bindString(11, sfz_yxjsrq);
        }
 
        String sfz_yxksrq = entity.getSfz_yxksrq();
        if (sfz_yxksrq != null) {
            stmt.bindString(12, sfz_yxksrq);
        }
 
        String zw_picpath = entity.getZw_picpath();
        if (zw_picpath != null) {
            stmt.bindString(13, zw_picpath);
        }
 
        String zw_features = entity.getZw_features();
        if (zw_features != null) {
            stmt.bindString(14, zw_features);
        }
        stmt.bindLong(15, entity.getZw_quality());
 
        String rl_picpath = entity.getRl_picpath();
        if (rl_picpath != null) {
            stmt.bindString(16, rl_picpath);
        }
 
        String cjTime = entity.getCjTime();
        if (cjTime != null) {
            stmt.bindString(17, cjTime);
        }
        stmt.bindLong(18, entity.getIsSbzt());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Bk_ks_cjxx entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sfz_cardNo = entity.getSfz_cardNo();
        if (sfz_cardNo != null) {
            stmt.bindString(2, sfz_cardNo);
        }
 
        String sfz_xm = entity.getSfz_xm();
        if (sfz_xm != null) {
            stmt.bindString(3, sfz_xm);
        }
 
        String sfz_xb = entity.getSfz_xb();
        if (sfz_xb != null) {
            stmt.bindString(4, sfz_xb);
        }
 
        String sfz_mz = entity.getSfz_mz();
        if (sfz_mz != null) {
            stmt.bindString(5, sfz_mz);
        }
 
        String sfz_birth = entity.getSfz_birth();
        if (sfz_birth != null) {
            stmt.bindString(6, sfz_birth);
        }
 
        String sfz_address = entity.getSfz_address();
        if (sfz_address != null) {
            stmt.bindString(7, sfz_address);
        }
 
        String sfz_sfzh = entity.getSfz_sfzh();
        if (sfz_sfzh != null) {
            stmt.bindString(8, sfz_sfzh);
        }
 
        String sfz_picpath = entity.getSfz_picpath();
        if (sfz_picpath != null) {
            stmt.bindString(9, sfz_picpath);
        }
 
        String sfz_qfjg = entity.getSfz_qfjg();
        if (sfz_qfjg != null) {
            stmt.bindString(10, sfz_qfjg);
        }
 
        String sfz_yxjsrq = entity.getSfz_yxjsrq();
        if (sfz_yxjsrq != null) {
            stmt.bindString(11, sfz_yxjsrq);
        }
 
        String sfz_yxksrq = entity.getSfz_yxksrq();
        if (sfz_yxksrq != null) {
            stmt.bindString(12, sfz_yxksrq);
        }
 
        String zw_picpath = entity.getZw_picpath();
        if (zw_picpath != null) {
            stmt.bindString(13, zw_picpath);
        }
 
        String zw_features = entity.getZw_features();
        if (zw_features != null) {
            stmt.bindString(14, zw_features);
        }
        stmt.bindLong(15, entity.getZw_quality());
 
        String rl_picpath = entity.getRl_picpath();
        if (rl_picpath != null) {
            stmt.bindString(16, rl_picpath);
        }
 
        String cjTime = entity.getCjTime();
        if (cjTime != null) {
            stmt.bindString(17, cjTime);
        }
        stmt.bindLong(18, entity.getIsSbzt());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Bk_ks_cjxx readEntity(Cursor cursor, int offset) {
        Bk_ks_cjxx entity = new Bk_ks_cjxx( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sfz_cardNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sfz_xm
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sfz_xb
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sfz_mz
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sfz_birth
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sfz_address
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sfz_sfzh
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sfz_picpath
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // sfz_qfjg
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // sfz_yxjsrq
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // sfz_yxksrq
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // zw_picpath
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // zw_features
            cursor.getInt(offset + 14), // zw_quality
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // rl_picpath
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // cjTime
            cursor.getInt(offset + 17) // isSbzt
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Bk_ks_cjxx entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSfz_cardNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSfz_xm(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSfz_xb(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSfz_mz(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSfz_birth(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSfz_address(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSfz_sfzh(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSfz_picpath(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSfz_qfjg(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSfz_yxjsrq(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSfz_yxksrq(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setZw_picpath(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setZw_features(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setZw_quality(cursor.getInt(offset + 14));
        entity.setRl_picpath(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCjTime(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setIsSbzt(cursor.getInt(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Bk_ks_cjxx entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Bk_ks_cjxx entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Bk_ks_cjxx entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
